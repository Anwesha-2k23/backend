"""
Django settings for anwesha project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
import pymysql
import environ

pymysql.install_as_MySQLdb()
env = environ.Env()
# reading .env file
environ.Env.read_env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False#env("DEBUG")
ALLOWED_HOSTS = ["*"]
CONFIGURATION = env("CONFIGURATION")
S3_ENABLED = True

# Application definition
INSTALLED_APPS = [
     'jet.dashboard',
    "jet",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    "user",
    "event",
    "map",
    "sponsor",
    "CA",
    "pytest_django",
    "atompay",
    "multicity",
    "rest_framework",
    "Sleek",
    "festpasses",
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

SITE_ID = 2

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.

    "DEFAULT_PERMISSION_CLASSES": [],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'user.middle.DisableCSRFMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "anwesha.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "anwesha.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if CONFIGURATION == 'local':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif CONFIGURATION == 'production':
   DATABASES = {
        "default": {
           "ENGINE": "django.db.backends.mysql",
            "NAME": env("DB_NAME"),
            "USER": env("DB_USER"),
            "PASSWORD": env("DB_PASSWORD"),
            "HOST": env("DB_HOST"),
            "PORT": env("DB_PORT"),
        }
    }

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AWS Credentials
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")

## Storage Settings
if S3_ENABLED:
    AWS_STORAGE_BUCKET_NAME = "anwesha-storage-bucket"
    AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_STATIC_LOCATION = "static"
    AWS_PUBLIC_MEDIA_LOCATION1 = "static/profile"
    AWS_PUBLIC_MEDIA_LOCATION2 = "static/qr/"
    AWS_PUBLIC_MEDIA_LOCATION3 = "static/gallery"
    AWS_PUBLIC_MEDIA_LOCATION4 = "static/multicity"

    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)
    STATICFILES_STORAGE = "anwesha.storage_backend.StaticStorage"
    DEFAULT_PROFILE_STORAGE = "anwesha.storage_backend.ProfileImageStorage"
    DEFAULT_QR_STORAGE = "amwesha.storage_backend.ProfileQRStorage"
    DEFAULT_GALLERY_STORAGE = "anwesha.storage_backend.PublicGalleryStorage"

# CSRF Settings
CSRF_COOKIE_SECURE = False
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1/', 'http://3.108.191.128/', 'http://localhost:3000/','https://anweshabackend.shop','https://anwesha.iitp.ac.in']

# CORS Settings
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1',
    'http://3.108.191.128',
    'http://localhost:3000',
    'https://anweshabackend.shop',
    'https://anwesha.iitp.ac.in'
]
CORS_ALLOW_CREDENTIALS = True

# JET CONFIGURATION
JET_THEMES = [
    {
        'theme': 'default', # theme folder name
        'color': '#47bac1', # color of the theme's button in user menu
        'title': 'Default' # theme title
    },
    {
        'theme': 'green',
        'color': '#44b78b',
        'title': 'Green'
    },
    {
        'theme': 'light-green',
        'color': '#2faa60',
        'title': 'Light Green'
    },
    {
        'theme': 'light-violet',
        'color': '#a464c4',
        'title': 'Light Violet'
    },
    {
        'theme': 'light-blue',
        'color': '#5EADDE',
        'title': 'Light Blue'
    },
    {
        'theme': 'light-gray',
        'color': '#222',
        'title': 'Light Gray'
    }
]

JET_SIDE_MENU_COMPACT = False
LOGIN_REDIRECT_URL = 'http://backend.anwesha.live/user/oauth/'
LOGOUT_REDIRECT_URL = 'https://anweshabackend.shop/admin/'

# Mail configuration
EMAIL_BACKEND = 'anwesha.backends.CustomEmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# Website host variable
WEBSITE_HOST = "localhost"#env('WEBSITE_HOST')
COOKIE_ENCRYPTION_SECRET = env('COOKIE_SECRET')

#razorpay api keys
RAZORPAY_API_KEY_ID = ""#env("RAZORPAY_API_KEY_ID")
RAZORPAY_API_KEY_SECRET =""# env("RAZORPAY_API_KEY_SECRET")

'''
:NOTE:
you will need an endpoint for sending email with required parameters
if you dont have your own email service you can use this one :- https://github.com/melencholicmice/mail-service
please make sure to isolate the docker container in microservice and not expose its port
'''
EMAIL_MICROSERVICE_ENDPOINT = "http://127.0.0.1:12000/send-mail/"
